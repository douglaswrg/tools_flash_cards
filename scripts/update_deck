#!/bin/bash

EXT='html'
TMP_DIR='/tmp'
BASE_DIR=`basename ${PWD}`
DIRS=''

function usage {
    echo -e 'update_deck\n'

    echo 'Update the deck of flash cards and HTML files using the contents of'
    echo -e 'the current directory.\n'

    echo 'There are no options for this tool.  There are two variables that are'
    echo -e 'used to determine output directories that files are written to:\n'

    echo -e '\tFCARD_OUT_DIR is used to determine the base output directory of'
    echo -e '\tthe flash cards.\n'

    echo -e '\tADOC_OUT_DIR is used to determine the base output directory of'
    echo -e '\tthe HTML files.\n'

    echo 'The following variables can be set to the section names (delimited by'
    echo -e 'spaces) for them to be appled to.\n'
    echo -e '\tFC_SKIP is used to skip the section.'
    echo -e '\tFC_BOTH is used to create two cards for each card.\n'

    output_locations
    section_flags
    exit 0
}

function output_locations {
    echo 'Current variables result in:'
    echo -en "\tCard files written to:     "
    echo ${F_OUT_DIR}
    echo -en "\tSection directories in:    "
    echo ${A_OUT_DIR}
    echo -en "\tExample files written to:  "
    echo -n ${ADOC_OUT_DIR}
    echo -e '\n'
}

function section_flags {
    echo 'Variables found for section flags:'
    cnt=0
    if [[ -n $FC_SKIP ]]; then
        echo -e '\tFC_SKIP: ' $FC_SKIP
        cnt=$((cnt + 1))
    fi

    if [[ -n $FC_BOTH ]]; then
        echo -e '\tFC_BOTH: ' $FC_BOTH
        cnt=$((cnt + 1))
    fi

    if [[ $cnt -eq 0 ]]; then
        echo -e '\tNone\n'
    else
        echo
    fi
}

function check_for_tool {
    # Ensure that a given tool / command can be found.
    cmd=`which $1`
    if [[ $? -eq 0 ]]; then
        echo $cmd
    else
        echo 'Unable to find command: ' $1 >&2
        return 1
    fi
}

function strip_extension {
    # Strips the file extenion from the file name.
    flength=${#1}
    start=$((flength - 5))
    if [[ ${1:$start:5} == '.adoc' ]]; then
        echo ${1:0:$start}
    else
        echo 'ERROR: Only support .adoc extentions.' 1>&2
        exit 1
    fi
}

function collect_directories {
    # Collects the directories that have files with the .adoc extension.
    # Note that DIRS is a global variable.

    for d in `ls -F | grep -E '/$'`
    do
        num_adoc_files=`ls -1 $d | grep -c '.adoc$'`
        if [[ $num_adoc_files -gt 0 ]]; then
            d=`echo $d | sed -e 's/\///'`
            DIRS="${DIRS} $d"
        fi
    done
}

# Determine directories based on envionment variables.
if [[ -n $FCARD_OUT_DIR ]]; then
    F_OUT_DIR=${FCARD_OUT_DIR}/${BASE_DIR}
else
    F_OUT_DIR=${TMP_DIR}/${BASE_DIR}
fi

if [[ -n $ADOC_OUT_DIR ]]; then
    A_OUT_DIR=${ADOC_OUT_DIR}/${BASE_DIR}
else
    A_OUT_DIR=${TMP_DIR}/${BASE_DIR}
fi

mkdir -p ${A_OUT_DIR} ${F_OUT_DIR}

if [[ -n $1 && $1 == '-h' ]]; then
    usage
fi

VERBOSE=''
if [[ -n $1 && $1 == '-v' ]]; then
    VERBOSE='-v'
    shift 1
fi

SHOW_DELIMITER=''
if [[ -n $1 && $1 == '-sd' ]]; then
    SHOW_DELIMITER='-sd'
    shift 1
fi

# Ensure that we immediately exit if one of the tools is not found.
set -e
FCARD=`check_for_tool fcards`
ADOC=`check_for_tool adoc`
COBJ=`check_for_tool check_objectives`
set +e

collect_directories

if [[ -d './scripts' ]]; then
    echo 'Copying scripts to: ' $F_OUT_DIR
    cp -r ./scripts ${F_OUT_DIR}/.
fi

for d in ${DIRS}
do
    # echo $d
    x=`echo $d | sed -e 's/\//_/'`
    ex_file="examples_${x}"

    # The fcards tool is used to read the directory, and create the following:
    #  - collection of examples from all files.
    #  - collection of flash cards from all files.
    ${FCARD} ${VERBOSE} -i $d -oe ${F_OUT_DIR}/${ex_file}.adoc \
                              -of ${F_OUT_DIR}/cards_${x}

    # Collect a count of the number of 2nd level headers to see if we need to
    # creating an HTML file makes sense.
    num_ex=`grep -c '^== ' ${F_OUT_DIR}/${ex_file}.adoc`
    if [[ $num_ex -eq 0 ]]; then
        if [[ -f {F_OUT_DIR}/${ex_file}.adoc ]]; then
            rm ${F_OUT_DIR}/${ex_file}.adoc
        fi
        if [[ -f ${ADOC_OUT_DIR}/${ex_file}.html ]]; then
            rm ${ADOC_OUT_DIR}/${ex_file}.html
        fi
    else
        # Create a new HTML file in F_OUT_DIR -- using it as a temporary
        # directory.
        ${ADOC} -n -q -o ${F_OUT_DIR} ${F_OUT_DIR}/${ex_file}.adoc

        # If the current HTML file exists, see if there is a difference in the
        # newly created file.
        if [[ -f ${ADOC_OUT_DIR}/${ex_file}.html ]]; then
            diff ${F_OUT_DIR}/${ex_file}.html ${ADOC_OUT_DIR}/${ex_file}.html \
                > /dev/null
        fi
        # If there is a difference or it does not currently exist, copy the
        # newly created file.
        if [[ ! -f ${ADOC_OUT_DIR}/${ex_file}.html || $? -gt 0 ]]; then
            echo ' - updating: ' ${ex_file}
            cp ${F_OUT_DIR}/${ex_file}.html ${ADOC_OUT_DIR}/${ex_file}.html 
        fi
    fi

    mkdir -p ${A_OUT_DIR}/$d

    # Cycle through each file in the directory to create a new HTML file.
    for f in `ls $d/*.adoc`
    do
        fname=`strip_extension $f`
        hname=${fname}.html
        if [[ ${A_OUT_DIR}/$hname -ot $f ]]; then
            # If the .adoc file is newer, create a new HTML file.
            echo ' - updating: ' $hname
            ${ADOC} -n -q -o ${A_OUT_DIR}/$d $f
        fi
    done
done

# Look to see if we have an objectives file.
OBJ_FILE='objectives.adoc'
if [[ -f $OBJ_FILE ]]; then
    fname=`strip_extension $OBJ_FILE`
    hname=${fname}.html
    # If it is newer, update the existing file.
    if [[ ${A_OUT_DIR}/$hname -ot $OBJ_FILE ]]; then
        echo
        echo 'Updating objectives.'
        ${ADOC} -n -q -o ${A_OUT_DIR} ${OBJ_FILE}
    fi

    ${COBJ}
fi

# If asked, show the delimiters to assist with a bulk import.
if [[ ${#SHOW_DELIMITER} -gt 0 ]]; then
    fcards -sd
fi
