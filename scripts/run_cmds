#!/bin/bash

# Script to help capture what commands would look like on the command line.
# Takes a file which has a list of commands to be run as an argument.

CMD_PROMPT='$ '
TMP_DIR="/tmp/run_cmds/$$"
mkdir -p ${TMP_DIR}

if [[ $1 == '-d' ]]; then
    DEBUG='Y'
    shift 1
fi

if [[ -f $1 ]]; then
    INFILE=$1
else
    echo 'No file given to execute!'
    exit 1
fi

function decho {
    if [[ $DEBUG == 'Y' ]]; then
        echo $*
    fi
}

function check_blanks {
    OUT=$(sed -n "/^${1}$/=" ${FILE_BL})
    if [[ -z $OUT ]]; then
        return 0
    else
        return 1
    fi
}

function check_comments {
    OUT=$(sed -n "/^${1}$/=" ${FILE_CL})
    if [[ -z $OUT ]]; then
        return 0
    else
        return 1
    fi
}

function check_spaced {
    OUT=$(sed -n "/^${1}$/=" ${FILE_SL})
    if [[ -z $OUT ]]; then
        return 0
    else
        return 1
    fi
}

function write_comments {
    START=$1
    STOP=$2
    FN=$3
    fname="${TMP_DIR}/cmts_${NUMS[${FN}]}"
    decho ' --- write_comments: ' $START $STOP $FN $fname
    sed -n -e "${START},${STOP} p" $INFILE > $fname
    # echo
}

function write_commands {
    START=$1
    STOP=$2
    FN=$3
    if [[ ${IN_EXAMPLE} == 'N' ]]; then
        touch ${TMP_DIR}/not_ex_cmd_${NUMS[${FN}]}
    fi
    fname="${TMP_DIR}/cmd_${NUMS[${FN}]}_${NUMS[$sub_fn]}"
    decho ' --- write_commands: ' $IN_EXAMPLE $sub_fn $START $STOP $FN $fname
    sed -n -e "${START},${STOP} p" $INFILE > $fname
    # echo
}

# Create an array of numbers that are padded with zeroes to help the file names
# have a set alphanumeric sort order.
NUM_LINES=$(cat $INFILE | wc -l)

# Of course this creates too many numbers, but it is guaranteed that there will
# be fewer commnad groups than there are lines in the file.
NUMS=($(seq -w $NUM_LINES))

# Use awk to get blank, commented, and spaced line numbers.
FILE_BL="${TMP_DIR}/lines_blank"
FILE_CL="${TMP_DIR}/lines_comment"
FILE_SL="${TMP_DIR}/lines_spaced"
awk '/^$/  {print FNR}' $INFILE > ${FILE_BL}
awk '/^#/  {print FNR}' $INFILE > ${FILE_CL}
awk '/^  / {print FNR}' $INFILE > ${FILE_SL}

# Collection of lines that belong to a set of adjacent comments.
COMMENT_GROUP_START=''
# Collection of lines that belong to a set of adjacent commands.
COMMAND_GROUP_START=''
IN_EXAMPLE='Y'

# File number index being created.
fn=0
# Subfile number.
sub_fn=0
for ln in $(seq $NUM_LINES)
do
    # Determine the type of line this line number is.
    BL=$(check_blanks $ln ; echo $?)
    CL=$(check_comments $ln ; echo $?)
    SL=$(check_spaced $ln ; echo $?)

    # Debug to show line number and which type was detected.
    decho $ln '-' $BL $CL $SL

    if [[ ${CL} -eq 1 ]]; then
        # A comment line will never end a comment group.
        if [[ -z ${COMMENT_GROUP_START} ]]; then
            COMMENT_GROUP_START=$ln
        fi

        # Collect the line number from the input file so we can check if it is
        # marking this group as not an example.
        cmt_line=$(sed -n "${ln} p" $INFILE)
        if [[ $cmt_line == '#:notexample' ]]; then
            IN_EXAMPLE='N'
        fi

        # If in a command group, write it out, reset the start number, and
        # increment the file number for the next command group.
        if [[ -n ${COMMAND_GROUP_START} ]]; then
            write_commands ${COMMAND_GROUP_START} $((ln - 1)) $fn
            COMMAND_GROUP_START=''
            fn=$((fn + 1))
        fi

    elif [[ ${BL} -eq 1 ]]; then
        # A blank line will only end a command group.
        if [[ -n ${COMMAND_GROUP_START} ]]; then
            write_commands ${COMMAND_GROUP_START} $((ln - 1)) $fn
            COMMAND_GROUP_START=''
            # Reset if we are in an example or not.
            IN_EXAMPLE='Y'
            # Increment the file number for the next command group.
            fn=$((fn + 1))
            # Reset the subgroup numbering.
            sub_fn=0
        fi
    elif [[ ${SL} -eq 1 ]]; then
        # Must do nothing but let the loop continue for spaced lines.
        continue
    else
        # A command will end a comment group.
        if [[ -n ${COMMENT_GROUP_START} ]]; then
            write_comments ${COMMENT_GROUP_START} $((ln - 1)) $fn
            COMMENT_GROUP_START=''
        fi

        # A command will always start a command group, but will only
        # write_commands if a command group exists.
        if [[ -z ${COMMAND_GROUP_START} ]]; then
            COMMAND_GROUP_START=$ln
        elif [[ -n ${COMMAND_GROUP_START} ]]; then
            write_commands ${COMMAND_GROUP_START} $((ln - 1)) $fn
            COMMAND_GROUP_START=$ln
            sub_fn=$((sub_fn + 1))
        fi
    fi
done

# Block to wrap up the block that we are end after the end of the file.
if [[ -n ${COMMAND_GROUP_START} ]]; then
    decho 'Command(s) left to do: ' ${COMMAND_GROUP_START} $ln $fn
    write_commands ${COMMAND_GROUP_START} $ln $fn
elif [[ -n ${COMMENT_GROUP_START} ]]; then
    decho 'Comment(s) left to do: ' ${COMMENT_GROUP_START} $ln $fn
    write_comments ${COMMENT_GROUP_START} $ln $fn
else
    decho 'Everything done?'
fi

# Loop through the number of command file blocks that were created in the
# previous loop.
for i in $(seq 0 $fn)
do
    # Grabe the first number from the created zero-padded numbers.
    num=${NUMS[${i}]}

    # If the first file does not exist, we can continue.
    if [[ ! -f ${TMP_DIR}/cmd_${num}_${NUMS[0]} ]]; then
        continue
    fi

    # Determine if we have a comment file for this number.
    CMTS_FILE="${TMP_DIR}/cmts_${num}"
    if [[ -f $CMTS_FILE ]]; then
        # Remove the # (and whitespace) from the start of the line.
        # Also remove the lines for :notexample.
        cat $CMTS_FILE | sed -e 's/^#[ ]*//g' | grep -v '^:'
    fi

    # Keep a line betwen comments and the literal block.
    echo

    # Check to see if this is an actual command example and set the string
    # for the literal block.
    if [[ ! -f ${TMP_DIR}/not_ex_cmd_${num} ]]; then
        block_chars='----'
    else
        block_chars='....'
    fi


    # Start of the literal block.
    echo '[source, console]'
    echo $block_chars

    # Collect the commands for this group and loop through them.
    for CMD_FILE in $(ls -1 ${TMP_DIR}/cmd_${num}* | sort)
    do
        # Show the command prompt.
        # Must be quoted in case there is a trailing space.
        # The -n skips the trailing newline so that the command is on
        # the same line.
        echo -n "${CMD_PROMPT}"
        cat $CMD_FILE

        # Skip running the commands if we are debugging the script.
        if [[ ! $DEBUG == 'Y' ]]; then
            # Some commands have wierd output on stardard error when
            # bash kills them due to a resource limit (ulimit).
            source $CMD_FILE > ${CMD_FILE}_out 2>&1
            wierdness=$(egrep $CMD_FILE ${CMD_FILE}_out)
            if [[ -z $wierdness ]]; then
                # When displaying the output file, we need to ensure that it
                # does not conflict with the literal block text.
                cat ${CMD_FILE}_out | sed -e 's/^----/ ---/g' \
                    -e 's/^\.\.\.\./ .../g'
            else
                # If there is an error in the file, it will probably look
                # somthing like this:
                #
                # ${CMD_FILE}: line 1: 23851 File size limit exceeded${CMD}...
                #
                # For some reason the orignal command does not have any
                # seperation from the error being reported.
                #
                # Awk is used to remove the following from the beginning of the
                # line.
                # - sourced file name
                # - line number
                # - processess number
                # and the orignal command from the end of the line.
                #
                # All of this is to recreate what the error looks like normally
                # on the command line as apposed to what it looks like when
                # sourced from a file.
                CMD=$(cat $CMD_FILE | cut -d' ' -f1)
                cat ${CMD_FILE}_out | \
                    awk -v CMD="${CMD}" \
                        '{
                            # Remove the first 5 columns
                            for(i=5;i<=NF;++i) $(i-4) = $i
                            # Locate the command in the record;
                            # the beginning character is assigned to RSTART
                            match($0, CMD)
                            # Prints the entire record starting at the first
                            # character to where the CMD string was found.
                            print substr($0, 1, RSTART)
                         }'
            fi
        fi
    done
    # End of the literal block and an extra line.
    echo $block_chars
    echo
done

# Remove the temporary files.
rm -rf $TMP_DIR
