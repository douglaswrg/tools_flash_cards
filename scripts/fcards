#!/usr/bin/env python3

import argparse
import os
import sys
from copy import deepcopy

# Flags for cards.
FLAG_SKIP = 'fc_skip'
FLAG_BOTH = 'fc_both'
FLAG_TMPL_VAR = 'fc_var'
FLAG_TMPL_CMD = 'fc_cmd'
FLAG_TMPL_SCMD = 'fc_scmd'
FLAG_TMPL_RCMD = 'fc_rcmd'
FLAG_TMPL_OPT = 'fc_opt'

new_file = """= Utility: Term: Path: word

The description of the word.

== Files

=== a file or directory

file or directory description

== Options

=== -x foo

This option is just an example.

== General

=== Some brief statement.

A description to be remembered.

== Examples

.Brief Description of command.
[source, console]
----
----

== Sources

* First item in list of locations.
"""

example_file_header = """= Examples
:toc:
:doctype: book
:reproducible:
:source-highlighter: pygments
:pygments-style: friendly
:pygments-linenums-mode: inline

"""

parser = argparse.ArgumentParser(description='Flash Card Builder')
parser.add_argument('-v', '--verbose', action="store_true",
                    help='Print information for each file in the directory.')
parser.add_argument('-sd', '--show-delimiter', action="store_true",
                    help='Show delimiters for flash card file.')
new_grp = parser.add_argument_group('new file')
new_grp.add_argument('-n', '--new', action="store",
                     help='Create new asciidoc file.')
read_grp = parser.add_argument_group('read file(s)')
read_grp.add_argument('-i', '--infile', action="store", default=False,
                      help='Read the specified file or directory.')
read_grp.add_argument('-oe', '--output-examples',
                      type=argparse.FileType('w', encoding='UTF-8'),
                      help='Create a file for examples.')

read_grp.add_argument('-of', '--output-flashcards',
                      type=argparse.FileType('w', encoding='UTF-8'),
                      help='Create a file for flashcards.')

ns = parser.parse_args()

class CardTemplate:
    fc_header = '\n' + '#' * 20 + '\n\n'
    fc_seperator = '\n' + '-' * 20 + '\n\n'
    TMPL_DEFAULT_FRONT = 'FRONT\n'
    TMPL_DEFAULT_BACK = 'BACK\n'

    def __init__(self, card, title='', fc_type=''):
        self.title = title
        self.fc_type = fc_type
        self.front = card[0]
        self.back = card[1]
        self.flags = []

        if len(card) > 2:
            self.flags = card[2:]

    def skip_card(self):
        if FLAG_SKIP in self.flags:
            return True
        else:
            return False

    def both_cards(self):
        if FLAG_BOTH in self.flags:
            return True
        else:
            return False

    def get_card(self, template='default'):
        if self.skip_card():
            # Returning a zero-length string seems to have the effect that is
            # desired.  write() does not add a newline to the file with this.
            return ''

        if hasattr(self, 'check_template_flag'):
            opt_tmpl = self.check_template_flag()
            if 'CMD' in str(opt_tmpl) and self.front == '--':
                self.front = ''

            if opt_tmpl:
                template = opt_tmpl

        front_tmpl = 'TMPL_' + template + '_FRONT'
        back_tmpl = 'TMPL_' + template + '_BACK'
        templates = [getattr(self, front_tmpl, self.TMPL_DEFAULT_FRONT),
                     getattr(self, back_tmpl, self.TMPL_DEFAULT_BACK)]
        # print(templates)

        front = templates[0]
        back = templates[1]

        KW = ['TITLE', ]
        for e in KW:
            front = front.replace(e, getattr(self, e.lower()))
            back = back.replace(e, getattr(self, e.lower()))

        front = front.replace('FRONT', self.front)
        back = back.replace('BACK', self.back)

        card = self.fc_header + front + self.fc_seperator + back

        if self.both_cards():
            card = card + self.fc_header + back + self.fc_seperator + front

        # print(card)
        return card

class GeneralTemplate(CardTemplate):
    TMPL_DEFAULT_FRONT = 'TITLE: FRONT\n'
    TMPL_DEFAULT_BACK = 'BACK\n'

class FileTemplate(CardTemplate):
    TMPL_DEFAULT_FRONT = 'TITLE: FRONT\n'
    TMPL_DEFAULT_BACK = 'BACK\n'

class OptionTemplate(CardTemplate):
    TMPL_DEFAULT_FRONT = 'TITLE option: FRONT\n'
    TMPL_DEFAULT_BACK = 'TITLE option that: BACK\n'
    TMPL_CMD_FRONT = '$ TITLE FRONT\n'
    TMPL_CMD_BACK = 'BACK\n'
    TMPL_SUDO_CMD_FRONT = '$ sudo TITLE FRONT\n'
    TMPL_SUDO_CMD_BACK = 'BACK\n'
    TMPL_ROOT_CMD_FRONT = '# TITLE FRONT\n'
    TMPL_ROOT_CMD_BACK = 'BACK\n'

    def check_template_flag(self):
        if FLAG_TMPL_CMD in self.flags:
            return 'CMD'
        elif FLAG_TMPL_SCMD in self.flags:
            return 'SUDO_CMD'
        elif FLAG_TMPL_RCMD in self.flags:
            return 'ROOT_CMD'
        else:
            return False

class CardFile:
    valid_types = [
            'utility',
            'term',
            'path',
        ]
    sections = [
            'heading',
            'files',
            'general',
            'options',
            'sources',
            'examples',
        ]

    def __init__(self, f):
        # Purely for state tracking.
        self.section = None

        # Template for card types.
        cards_template = {
            'cards': [],
            'flags': [],
            'count_adj': 0,
        }

        # Storage for cards.
        self.cards = {
            'heading': deepcopy(cards_template),
            'files': deepcopy(cards_template),
            'options': deepcopy(cards_template),
            'general': deepcopy(cards_template),
        }
        # Heading cards will have a type.
        self.cards['heading']['type'] = None

        # Format for cards.
        self.cards['heading']['formats'] = {}

        # Examples are stored here.
        self.examples = ''

        # Initialize counts.
        self.counts = {'examples': 0, 'cards': 0}

        self.proc_file(f)
        # print('\n', '*' * 20)
        self.proc_flags()
        # print('\t', '-' * 20)
        # pprint(self.cards)
        # print('\n', '*' * 20, '\n')

        if ns.output_examples:
            cnt = 0
            for l in self.examples.split('\n'):
                if l.startswith('----'):
                    cnt += 1
            self.counts['examples'] = int(cnt / 2)

        if ns.output_flashcards:
            dsc = 0
            for sec in self.cards:
                adj = self.cards[sec]['count_adj']
                self.counts['cards'] += len(self.cards[sec]['cards']) + adj

    def proc_flags(self):
        # Look for environment variables for global flags.
        for var in ('FC_SKIP', 'FC_BOTH'):
            sections = os.getenv(var)
            if sections:
                # print('OS Var', var, ':',  sections)
                for section in sections.split():
                    # print('\tvars', var, section)
                    if section in self.cards:
                        self.cards[section]['flags'].append(var.lower())
                    # else:
                    #     print('Ignoring', section, 'in', var, end='.')

        # Find flags and append them to the card (list).
        for section in self.cards:
            # print('section: ', section)
            # pprint(self.cards[section]['cards'])

            for card in self.cards[section]['cards']:
                flags = False
                # print('before: ', card)

                # Strip flags from the beginning of the description and append
                # it to the card's list.
                for w in card[1].split():
                    if w.startswith(':fc_'):
                        flag = card[1].split(' ')[0].strip(':')
                        # print('\tFound flag:', flag)
                        card[1] = ' '.join(card[1].split(' ')[1:])
                        card.append(flag)
                        flags = True
                    else:
                        # print('\tnot a flag: ', w)
                        break

                # Consider section level flags, and apply if they are not there.
                sect_flags = self.cards[section]['flags']
                if len(sect_flags) > 0:
                    # print('Found section flag: ', sect_flags)
                    for flag in sect_flags:
                        if flag not in card[2:]:
                            # print('\tAdding section flag', flag, 'to card.')
                            card.append(flag)
                            flags = True

                # Update count adjustments based on flags that would affect
                # them.
                if flags:
                    if FLAG_SKIP in card[2:]:
                        self.cards[section]['count_adj'] -= 1

                    if FLAG_BOTH in card[2:]:
                        self.cards[section]['count_adj'] += 1

                # print('after: ', card)
                # print()

    def change_section(self, section):
        if section in self.sections:
            self.section = section
        else:
            print('ERROR: Bad Section: ', section)
            self.section = section

        if self.section == 'examples':
            self.examples = '== ' + self.cards['heading']['cards'][0][0] + '\n'

    def add_key(self, header):
        self.cards[self.section]['cards'].append([header, ''])

    def add_text(self, text):
        my_sects = ['options', 'files', 'general', 'heading']
        blank_line = False
        if text == '\n':
            blank_line = True
            text = ''

        if text.endswith('\n') and self.section is not 'examples':
            text = text.rstrip() + ' '

        if self.section in my_sects and not blank_line:
            cards = self.cards[self.section]['cards']
            if len(cards) > 0:
                cards[-1][1] = cards[-1][1] + text
            else:
                if text.startswith(':fc_'):
                    # print('_' + text + '_')
                    flag = text.strip(': ')
                    # print(self.section, 'flag: ', flag)

                    self.cards[self.section]['flags'].append(flag)

        if self.section == 'examples':
            if blank_line:
                text = '\n'

            self.examples = self.examples + text.rstrip(' ') + '\n'

    def proc_file(self, f):
        # print()
        for l in open(f):
            # print('_' + l.strip() + '_')
            if l.startswith('= '):
                heading = self.cards['heading']
                l = l.split()
                if not len(l) == 3:
                    print('Need to choose a type in the header!')
                    sys.exit()

                pre, card_type, title = l[:]
                # card_type = card_type.lower().strip(':')
                card_type = card_type.lower().strip(':')
                if card_type in self.valid_types:
                    self.change_section('heading')
                    heading['type'] = card_type
                    heading['cards'].append([title.strip(), ''])
                else:
                    print('Unknown type: ', card_type)
                    sys.exit()

            elif l.startswith('== '):
                pre, header = l.split()
                header = header.strip().lower()
                self.change_section(header)
            elif l.startswith('=== '):
                header = ' '.join(l.split()[1:])
                self.add_key(header)
            else:
                self.add_text(l)

    def write_cards(self, fc_file):
        ## Header Card
        section = self.cards['heading']
        opts = {'title': section['cards'][0][0],
                'fc_type': section['type'],
                'card': section['cards'][0],
                }
        c = CardTemplate(**opts)
        fc_file.write(c.get_card())

        ## Option Cards
        section = self.cards['options']
        for card in section['cards']:
            opts.update({'card': card})
            c = OptionTemplate(**opts)
            fc_file.write(c.get_card())

        ## File Cards
        section = self.cards['files']
        for card in section['cards']:
            opts.update({'card': card})
            c = FileTemplate(**opts)
            fc_file.write(c.get_card())
        ## General Cards
        section = self.cards['general']
        for card in section['cards']:
            opts.update({'card': card})
            c = GeneralTemplate(**opts)
            fc_file.write(c.get_card())

        fc_file.write('\n')

def get_dir_name(infile):
    if infile == '.':
        dname = os.path.realpath('.')
        dname = os.path.basename(dname)
        # print('Directory: ', dname)
    elif os.path.basename(infile) == infile:
        dname = os.path.realpath(infile)
        dname = os.path.basename(dname)
        # print('Directory: ', dname)
    else:
        dname = os.path.dirname(infile)
        dname = os.path.basename(dname)
        # print('Directory: ', dname)

    return dname

if ns.infile:
    files = []
    cards = []
    if os.path.isfile(ns.infile):
        files.append(ns.infile)
    else:
        for f in os.listdir(ns.infile):
            if f.endswith('.adoc'):
                files.append(f)
        files.sort()

    if ns.output_examples:
        # Create file with header if option specified.
        for l in example_file_header:
            ns.output_examples.write(l)

    dname = get_dir_name(ns.infile)
    tot_examples = 0
    tot_cards = 0
    print(str('Directory: ' + dname).ljust(20), end='')
    for f in files:
        fname = os.path.join(dname, f)
        # print('Directory: ', dname.ljust(10), 'File: ', f.ljust(15), end='')
        c = CardFile(fname)
        cards.append(c)
        tot_examples += c.counts['examples']
        tot_cards += c.counts['cards']

    # Directory name and totals.
    print(str(int(tot_examples)).rjust(3), 'examples',
          str(int(tot_cards)).rjust(3), 'cards')

    for c in cards:
        if ns.verbose:
            # Title
            print(str('    ' + c.title).ljust(20), end='')

            # Examples.
            print(str(int(c.counts['examples'])).rjust(3), 'examples', end='')

            # Cards
            print(str(int(c.counts['cards'])).rjust(4), 'cards', end='')

            print()

        ns.output_examples.write(c.examples)
        c.write_cards(ns.output_flashcards)

elif ns.new:
    fname = ns.new + '.adoc'
    if not os.path.isfile(fname):
        print('Creating: ', fname)
        with open(fname, 'w') as f:
            for l in new_file:
                f.write(l)
    else:
        print('File already exists: ', fname)

elif ns.show_delimiter:
    print('Delimiter between cards:', end='')
    print(CardFile.fc_header, end='')
    print('Delimiter between term and definition:', end='')
    print(CardFile.fc_seperator, end='')

else:
    parser.print_help()
